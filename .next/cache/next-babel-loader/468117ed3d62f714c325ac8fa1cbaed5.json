{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport products from '../products.json';\nimport { initiateCheckout } from '../lib/payments.js';\nconst defaultCart = {\n  products: {}\n};\nexport default function useCart() {\n  const {\n    0: cart,\n    1: updateCart\n  } = useState(defaultCart);\n  const cartItems = Object.keys(cart.products).map(key => {\n    const product = products.find(({\n      id\n    }) => `${id}` === `${key}`);\n    return _objectSpread(_objectSpread({}, cart.products[key]), {}, {\n      pricePerUnit: product.price\n    });\n  });\n  const subtotal = cartItems.reduce((accumulator, {\n    pricePerUnit,\n    quantity\n  }) => {\n    return accumulator + pricePerUnit * quantity;\n  }, 0);\n  const quantity = cartItems.reduce((accumulator, {\n    quantity\n  }) => {\n    return accumulator + quantity;\n  }, 0);\n\n  function addToCart({\n    id\n  }) {\n    updateCart(prev => {\n      let cart = _objectSpread({}, prev);\n\n      if (cart.products[id]) {\n        cart.products[id].quantity = cart.products[id].quantity + 1;\n      } else {\n        cart.products[id] = {\n          id,\n          quantity: 1\n        };\n      }\n\n      return cart;\n    });\n  }\n\n  function checkout() {\n    initiateCheckout({\n      lineItems: cartItems.map(({\n        id,\n        quantity\n      }) => {\n        return {\n          price: id,\n          quantity\n        };\n      })\n    });\n  }\n\n  return {\n    cart,\n    subtotal,\n    quantity,\n    addToCart,\n    checkout\n  };\n}","map":{"version":3,"sources":["/Users/acandael/Tutorials/space-jelly-store/hooks/use-cart.js"],"names":["useState","products","initiateCheckout","defaultCart","useCart","cart","updateCart","cartItems","Object","keys","map","key","product","find","id","pricePerUnit","price","subtotal","reduce","accumulator","quantity","addToCart","prev","checkout","lineItems"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AAGA,MAAMC,WAAW,GAAG;AAClBF,EAAAA,QAAQ,EAAE;AADQ,CAApB;AAIA,eAAe,SAASG,OAAT,GAAmB;AAEhC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAqBN,QAAQ,CAACG,WAAD,CAAnC;AAEA,QAAMI,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACJ,QAAjB,EAA2BS,GAA3B,CAA+BC,GAAG,IAAI;AACtD,UAAMC,OAAO,GAAGX,QAAQ,CAACY,IAAT,CAAc,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAa,GAAEA,EAAG,EAAN,KAAa,GAAEH,GAAI,EAA7C,CAAhB;AACA,2CACKN,IAAI,CAACJ,QAAL,CAAcU,GAAd,CADL;AAEEI,MAAAA,YAAY,EAAEH,OAAO,CAACI;AAFxB;AAID,GANiB,CAAlB;AAQA,QAAMC,QAAQ,GAAGV,SAAS,CAACW,MAAV,CAAiB,CAACC,WAAD,EAAc;AAAEJ,IAAAA,YAAF;AAAgBK,IAAAA;AAAhB,GAAd,KAA6C;AAC7E,WAAOD,WAAW,GAAKJ,YAAY,GAAGK,QAAtC;AACD,GAFgB,EAEd,CAFc,CAAjB;AAIA,QAAMA,QAAQ,GAAGb,SAAS,CAACW,MAAV,CAAiB,CAACC,WAAD,EAAc;AAAEC,IAAAA;AAAF,GAAd,KAA+B;AAC/D,WAAOD,WAAW,GAAGC,QAArB;AACD,GAFgB,EAEd,CAFc,CAAjB;;AAKA,WAASC,SAAT,CAAmB;AAAEP,IAAAA;AAAF,GAAnB,EAA2B;AACzBR,IAAAA,UAAU,CAAEgB,IAAD,IAAU;AACnB,UAAIjB,IAAI,qBAAOiB,IAAP,CAAR;;AAEA,UAAKjB,IAAI,CAACJ,QAAL,CAAca,EAAd,CAAL,EAAyB;AACvBT,QAAAA,IAAI,CAACJ,QAAL,CAAca,EAAd,EAAkBM,QAAlB,GAA6Bf,IAAI,CAACJ,QAAL,CAAca,EAAd,EAAkBM,QAAlB,GAA6B,CAA1D;AACD,OAFD,MAEO;AACLf,QAAAA,IAAI,CAACJ,QAAL,CAAca,EAAd,IAAoB;AAClBA,UAAAA,EADkB;AAElBM,UAAAA,QAAQ,EAAE;AAFQ,SAApB;AAID;;AAED,aAAOf,IAAP;AACD,KAbS,CAAV;AAcD;;AAED,WAASkB,QAAT,GAAoB;AAClBrB,IAAAA,gBAAgB,CAAC;AACfsB,MAAAA,SAAS,EAAEjB,SAAS,CAACG,GAAV,CAAc,CAAC;AAAEI,QAAAA,EAAF;AAAMM,QAAAA;AAAN,OAAD,KAAsB;AAC7C,eAAO;AACLJ,UAAAA,KAAK,EAAEF,EADF;AAELM,UAAAA;AAFK,SAAP;AAID,OALU;AADI,KAAD,CAAhB;AAQD;;AAED,SAAO;AACLf,IAAAA,IADK;AAELY,IAAAA,QAFK;AAGLG,IAAAA,QAHK;AAILC,IAAAA,SAJK;AAKLE,IAAAA;AALK,GAAP;AAQD","sourcesContent":["import { useState } from 'react';\n\nimport products from '../products.json';\n\nimport { initiateCheckout } from '../lib/payments.js'\n\n\nconst defaultCart = {\n  products: {}\n}\n\nexport default function useCart() {\n\n  const [cart, updateCart] = useState(defaultCart);\n\n  const cartItems = Object.keys(cart.products).map(key => {\n    const product = products.find(({ id }) => `${id}` === `${key}`);\n    return {\n      ...cart.products[key],\n      pricePerUnit: product.price\n    }\n  });\n\n  const subtotal = cartItems.reduce((accumulator, { pricePerUnit, quantity }) => {\n    return accumulator + ( pricePerUnit * quantity );\n  }, 0);\n\n  const quantity = cartItems.reduce((accumulator, { quantity }) => {\n    return accumulator + quantity;\n  }, 0);\n\n\n  function addToCart({ id }) {\n    updateCart((prev) => {\n      let cart = {...prev};\n\n      if ( cart.products[id] ) {\n        cart.products[id].quantity = cart.products[id].quantity + 1;\n      } else {\n        cart.products[id] = {\n          id,\n          quantity: 1\n        }\n      }\n\n      return cart;\n    })\n  }\n\n  function checkout() {\n    initiateCheckout({\n      lineItems: cartItems.map(({ id, quantity }) => {\n        return {\n          price: id,\n          quantity\n        }\n      })\n    })\n  }\n\n  return {\n    cart,\n    subtotal,\n    quantity,\n    addToCart,\n    checkout\n  }\n\n}"]},"metadata":{},"sourceType":"module"}