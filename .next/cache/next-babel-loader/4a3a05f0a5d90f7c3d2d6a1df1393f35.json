{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { initiateCheckout } from '../lib/payments';\nimport products from '../products.json';\nconst defaultCart = {\n  products: {}\n};\n\nfunction addToCart({\n  id\n} = {}) {\n  updateCart(prev => {\n    let cart = _objectSpread({}, prev);\n\n    if (cart.products[id]) {\n      cart.products[id].quantity = cart.products[id].quantity + 1;\n    } else {\n      cart.products[id] = {\n        id,\n        quantity: 1\n      };\n    }\n\n    return cart;\n  });\n}\n\nconst cartItems = Object.keys(cart.products).map(key => {\n  const product = products.find(({\n    id\n  }) => `${id}` === `${key}`);\n  return _objectSpread(_objectSpread({}, cart.products[key]), {}, {\n    pricePerItem: product.price\n  });\n});\nconst subTotal = cartItems.reduce((accumulator, {\n  pricePerItem,\n  quantity\n}) => {\n  return accumulator + pricePerItem * quantity;\n}, 0);\nconst totalItems = cartItems.reduce((accumulator, {\n  quantity\n}) => {\n  return accumulator + quantity;\n}, 0);\nexport default function useCart() {\n  const {\n    0: cart,\n    1: updateCart\n  } = useState(defaultCart);\n  return {\n    cart,\n    updateCart,\n    subTotal,\n    cartItems,\n    checkout\n  };\n}","map":{"version":3,"sources":["/Users/acandael/Tutorials/space-jelly-store/hooks/use-cart.js"],"names":["useState","initiateCheckout","products","defaultCart","addToCart","id","updateCart","prev","cart","quantity","cartItems","Object","keys","map","key","product","find","pricePerItem","price","subTotal","reduce","accumulator","totalItems","useCart","checkout"],"mappings":";;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,gBAAR,QAA+B,iBAA/B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,MAAMC,WAAW,GAAG;AAClBD,EAAAA,QAAQ,EAAE;AADQ,CAApB;;AAIA,SAASE,SAAT,CAAmB;AAACC,EAAAA;AAAD,IAAO,EAA1B,EAA6B;AAC3BC,EAAAA,UAAU,CAACC,IAAI,IAAI;AACjB,QAAIC,IAAI,qBAAOD,IAAP,CAAR;;AAEA,QAAIC,IAAI,CAACN,QAAL,CAAcG,EAAd,CAAJ,EAAuB;AACrBG,MAAAA,IAAI,CAACN,QAAL,CAAcG,EAAd,EAAkBI,QAAlB,GAA6BD,IAAI,CAACN,QAAL,CAAcG,EAAd,EAAkBI,QAAlB,GAA6B,CAA1D;AACD,KAFD,MAEO;AACLD,MAAAA,IAAI,CAACN,QAAL,CAAcG,EAAd,IAAoB;AAClBA,QAAAA,EADkB;AAElBI,QAAAA,QAAQ,EAAE;AAFQ,OAApB;AAID;;AACD,WAAOD,IAAP;AACD,GAZS,CAAV;AAaD;;AAED,MAAME,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACN,QAAjB,EAA2BW,GAA3B,CAA+BC,GAAG,IAAI;AACtD,QAAMC,OAAO,GAAGb,QAAQ,CAACc,IAAT,CAAc,CAAC;AAACX,IAAAA;AAAD,GAAD,KAAW,GAAEA,EAAG,EAAN,KAAa,GAAES,GAAI,EAA3C,CAAhB;AACA,yCACKN,IAAI,CAACN,QAAL,CAAcY,GAAd,CADL;AAEEG,IAAAA,YAAY,EAAEF,OAAO,CAACG;AAFxB;AAID,CANiB,CAAlB;AAQA,MAAMC,QAAQ,GAAGT,SAAS,CAACU,MAAV,CAAiB,CAACC,WAAD,EAAc;AAACJ,EAAAA,YAAD;AAAeR,EAAAA;AAAf,CAAd,KAA2C;AAC3E,SAAOY,WAAW,GAAIJ,YAAY,GAAGR,QAArC;AACD,CAFgB,EAEd,CAFc,CAAjB;AAIA,MAAMa,UAAU,GAAGZ,SAAS,CAACU,MAAV,CAAiB,CAACC,WAAD,EAAc;AAACZ,EAAAA;AAAD,CAAd,KAA6B;AAC/D,SAAOY,WAAW,GAAGZ,QAArB;AACD,CAFkB,EAEhB,CAFgB,CAAnB;AAOA,eAAe,SAASc,OAAT,GAAkB;AAC/B,QAAM;AAAA,OAACf,IAAD;AAAA,OAAOF;AAAP,MAAqBN,QAAQ,CAACG,WAAD,CAAnC;AACA,SAAO;AACLK,IAAAA,IADK;AAELF,IAAAA,UAFK;AAGLa,IAAAA,QAHK;AAILT,IAAAA,SAJK;AAKLc,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import {useState} from 'react';\nimport {initiateCheckout} from '../lib/payments'\nimport products from '../products.json';\n\nconst defaultCart = {\n  products: {}\n}\n\nfunction addToCart({id} = {}){\n  updateCart(prev => {\n    let cart = {...prev}\n\n    if (cart.products[id]) {\n      cart.products[id].quantity = cart.products[id].quantity + 1\n    } else {\n      cart.products[id] = {\n        id,\n        quantity: 1\n      }\n    }\n    return cart;\n  })\n}\n\nconst cartItems = Object.keys(cart.products).map(key => {\n  const product = products.find(({id}) => `${id}` === `${key}`)\n  return {\n    ...cart.products[key],\n    pricePerItem: product.price\n  }\n})\n\nconst subTotal = cartItems.reduce((accumulator, {pricePerItem, quantity}) => {\n  return accumulator + (pricePerItem * quantity)\n}, 0)\n\nconst totalItems = cartItems.reduce((accumulator, {quantity}) => {\n  return accumulator + quantity\n}, 0)\n\n\n\n\nexport default function useCart(){\n  const [cart, updateCart] = useState(defaultCart)\n  return {\n    cart,\n    updateCart,\n    subTotal,\n    cartItems,\n    checkout\n  }\n}"]},"metadata":{},"sourceType":"module"}